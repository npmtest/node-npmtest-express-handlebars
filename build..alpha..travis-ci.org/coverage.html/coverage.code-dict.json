{"/home/travis/build/npmtest/node-npmtest-express-handlebars/test.js":"/* istanbul instrument in package npmtest_express_handlebars */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-handlebars/lib.npmtest_express_handlebars.js":"/* istanbul instrument in package npmtest_express_handlebars */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_handlebars = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_handlebars = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-handlebars/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-handlebars && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_handlebars */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_handlebars\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_handlebars.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_express_handlebars.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_handlebars.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_express_handlebars.__dirname +\n                    '/lib.npmtest_express_handlebars.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-handlebars/node_modules/express-handlebars/index.js":"/*\n * Copyright (c) 2014, Yahoo Inc. All rights reserved.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n\n'use strict';\n\nvar ExpressHandlebars = require('./lib/express-handlebars');\n\nexports = module.exports  = exphbs;\nexports.create            = create;\nexports.ExpressHandlebars = ExpressHandlebars;\n\n// -----------------------------------------------------------------------------\n\nfunction exphbs(config) {\n    return create(config).engine;\n}\n\nfunction create(config) {\n    return new ExpressHandlebars(config);\n}\n","/home/travis/build/npmtest/node-npmtest-express-handlebars/node_modules/express-handlebars/lib/express-handlebars.js":"/*\n * Copyright (c) 2015, Yahoo Inc. All rights reserved.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n\n'use strict';\n\nvar Promise = global.Promise || require('promise');\n\nvar glob       = require('glob');\nvar Handlebars = require('handlebars');\nvar fs         = require('graceful-fs');\nvar path       = require('path');\n\nvar utils = require('./utils');\n\nmodule.exports = ExpressHandlebars;\n\n// -----------------------------------------------------------------------------\n\nfunction ExpressHandlebars(config) {\n    // Config properties with defaults.\n    utils.assign(this, {\n        handlebars     : Handlebars,\n        extname        : '.handlebars',\n        layoutsDir     : 'views/layouts/',\n        partialsDir    : 'views/partials/',\n        defaultLayout  : undefined,\n        helpers        : undefined,\n        compilerOptions: undefined,\n    }, config);\n\n    // Express view engine integration point.\n    this.engine = this.renderView.bind(this);\n\n    // Normalize `extname`.\n    if (this.extname.charAt(0) !== '.') {\n        this.extname = '.' + this.extname;\n    }\n\n    // Internal caches of compiled and precompiled templates.\n    this.compiled    = Object.create(null);\n    this.precompiled = Object.create(null);\n\n    // Private internal file system cache.\n    this._fsCache = Object.create(null);\n}\n\nExpressHandlebars.prototype.getPartials = function (options) {\n    var partialsDirs = Array.isArray(this.partialsDir) ?\n            this.partialsDir : [this.partialsDir];\n\n    partialsDirs = partialsDirs.map(function (dir) {\n        var dirPath;\n        var dirTemplates;\n        var dirNamespace;\n\n        // Support `partialsDir` collection with object entries that contain a\n        // templates promise and a namespace.\n        if (typeof dir === 'string') {\n            dirPath = dir;\n        } else if (typeof dir === 'object') {\n            dirTemplates = dir.templates;\n            dirNamespace = dir.namespace;\n            dirPath      = dir.dir;\n        }\n\n        // We must have some path to templates, or templates themselves.\n        if (!(dirPath || dirTemplates)) {\n            throw new Error('A partials dir must be a string or config object');\n        }\n\n        // Make sure we're have a promise for the templates.\n        var templatesPromise = dirTemplates ? Promise.resolve(dirTemplates) :\n                this.getTemplates(dirPath, options);\n\n        return templatesPromise.then(function (templates) {\n            return {\n                templates: templates,\n                namespace: dirNamespace,\n            };\n        });\n    }, this);\n\n    return Promise.all(partialsDirs).then(function (dirs) {\n        var getTemplateName = this._getTemplateName.bind(this);\n\n        return dirs.reduce(function (partials, dir) {\n            var templates = dir.templates;\n            var namespace = dir.namespace;\n            var filePaths = Object.keys(templates);\n\n            filePaths.forEach(function (filePath) {\n                var partialName       = getTemplateName(filePath, namespace);\n                partials[partialName] = templates[filePath];\n            });\n\n            return partials;\n        }, {});\n    }.bind(this));\n};\n\nExpressHandlebars.prototype.getTemplate = function (filePath, options) {\n    filePath = path.resolve(filePath);\n    options || (options = {});\n\n    var precompiled = options.precompiled;\n    var cache       = precompiled ? this.precompiled : this.compiled;\n    var template    = options.cache && cache[filePath];\n\n    if (template) {\n        return template;\n    }\n\n    // Optimistically cache template promise to reduce file system I/O, but\n    // remove from cache if there was a problem.\n    template = cache[filePath] = this._getFile(filePath, {cache: options.cache})\n        .then(function (file) {\n            if (precompiled) {\n                return this._precompileTemplate(file, this.compilerOptions);\n            }\n\n            return this._compileTemplate(file, this.compilerOptions);\n        }.bind(this));\n\n    return template.catch(function (err) {\n        delete cache[filePath];\n        throw err;\n    });\n};\n\nExpressHandlebars.prototype.getTemplates = function (dirPath, options) {\n    options || (options = {});\n    var cache = options.cache;\n\n    return this._getDir(dirPath, {cache: cache}).then(function (filePaths) {\n        var templates = filePaths.map(function (filePath) {\n            return this.getTemplate(path.join(dirPath, filePath), options);\n        }, this);\n\n        return Promise.all(templates).then(function (templates) {\n            return filePaths.reduce(function (hash, filePath, i) {\n                hash[filePath] = templates[i];\n                return hash;\n            }, {});\n        });\n    }.bind(this));\n};\n\nExpressHandlebars.prototype.render = function (filePath, context, options) {\n    options || (options = {});\n\n    return Promise.all([\n        this.getTemplate(filePath, {cache: options.cache}),\n        options.partials || this.getPartials({cache: options.cache}),\n    ]).then(function (templates) {\n        var template = templates[0];\n        var partials = templates[1];\n        var helpers  = options.helpers || this.helpers;\n\n        // Add ExpressHandlebars metadata to the data channel so that it's\n        // accessible within the templates and helpers, namespaced under:\n        // `@exphbs.*`\n        var data = utils.assign({}, options.data, {\n            exphbs: utils.assign({}, options, {\n                filePath: filePath,\n                helpers : helpers,\n                partials: partials,\n            }),\n        });\n\n        return this._renderTemplate(template, context, {\n            data    : data,\n            helpers : helpers,\n            partials: partials,\n        });\n    }.bind(this));\n};\n\nExpressHandlebars.prototype.renderView = function (viewPath, options, callback) {\n    options || (options = {});\n\n    var context = options;\n\n    // Express provides `settings.views` which is the path to the views dir that\n    // the developer set on the Express app. When this value exists, it's used\n    // to compute the view's name.\n    var view;\n    var viewsPath = options.settings && options.settings.views;\n    if (viewsPath) {\n        view = this._getTemplateName(path.relative(viewsPath, viewPath));\n    }\n\n    // Merge render-level and instance-level helpers together.\n    var helpers = utils.assign({}, this.helpers, options.helpers);\n\n    // Merge render-level and instance-level partials together.\n    var partials = Promise.all([\n        this.getPartials({cache: options.cache}),\n        Promise.resolve(options.partials),\n    ]).then(function (partials) {\n        return utils.assign.apply(null, [{}].concat(partials));\n    });\n\n    // Pluck-out ExpressHandlebars-specific options and Handlebars-specific\n    // rendering options.\n    options = {\n        cache : options.cache,\n        view  : view,\n        layout: 'layout' in options ? options.layout : this.defaultLayout,\n\n        data    : options.data,\n        helpers : helpers,\n        partials: partials,\n    };\n\n    this.render(viewPath, context, options)\n        .then(function (body) {\n            var layoutPath = this._resolveLayoutPath(options.layout);\n\n            if (layoutPath) {\n                return this.render(\n                    layoutPath,\n                    utils.assign({}, context, {body: body}),\n                    utils.assign({}, options, {layout: undefined})\n                );\n            }\n\n            return body;\n        }.bind(this))\n        .then(utils.passValue(callback))\n        .catch(utils.passError(callback));\n};\n\n// -- Protected Hooks ----------------------------------------------------------\n\nExpressHandlebars.prototype._compileTemplate = function (template, options) {\n    return this.handlebars.compile(template, options);\n};\n\nExpressHandlebars.prototype._precompileTemplate = function (template, options) {\n    return this.handlebars.precompile(template, options);\n};\n\nExpressHandlebars.prototype._renderTemplate = function (template, context, options) {\n    return template(context, options);\n};\n\n// -- Private ------------------------------------------------------------------\n\nExpressHandlebars.prototype._getDir = function (dirPath, options) {\n    dirPath = path.resolve(dirPath);\n    options || (options = {});\n\n    var cache = this._fsCache;\n    var dir   = options.cache && cache[dirPath];\n\n    if (dir) {\n        return dir.then(function (dir) {\n            return dir.concat();\n        });\n    }\n\n    var pattern = '**/*' + this.extname;\n\n    // Optimistically cache dir promise to reduce file system I/O, but remove\n    // from cache if there was a problem.\n    dir = cache[dirPath] = new Promise(function (resolve, reject) {\n        glob(pattern, {\n            cwd   : dirPath,\n            follow: true\n        }, function (err, dir) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(dir);\n            }\n        });\n    });\n\n    return dir.then(function (dir) {\n        return dir.concat();\n    }).catch(function (err) {\n        delete cache[dirPath];\n        throw err;\n    });\n};\n\nExpressHandlebars.prototype._getFile = function (filePath, options) {\n    filePath = path.resolve(filePath);\n    options || (options = {});\n\n    var cache = this._fsCache;\n    var file  = options.cache && cache[filePath];\n\n    if (file) {\n        return file;\n    }\n\n    // Optimistically cache file promise to reduce file system I/O, but remove\n    // from cache if there was a problem.\n    file = cache[filePath] = new Promise(function (resolve, reject) {\n        fs.readFile(filePath, 'utf8', function (err, file) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(file);\n            }\n        });\n    });\n\n    return file.catch(function (err) {\n        delete cache[filePath];\n        throw err;\n    });\n};\n\nExpressHandlebars.prototype._getTemplateName = function (filePath, namespace) {\n    var extRegex = new RegExp(this.extname + '$');\n    var name     = filePath.replace(extRegex, '');\n\n    if (namespace) {\n        name = namespace + '/' + name;\n    }\n\n    return name;\n};\n\nExpressHandlebars.prototype._resolveLayoutPath = function (layoutPath) {\n    if (!layoutPath) {\n        return null;\n    }\n\n    if (!path.extname(layoutPath)) {\n        layoutPath += this.extname;\n    }\n\n    return path.resolve(this.layoutsDir, layoutPath);\n};\n","/home/travis/build/npmtest/node-npmtest-express-handlebars/node_modules/express-handlebars/lib/utils.js":"/*\n * Copyright (c) 2014, Yahoo Inc. All rights reserved.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n\n'use strict';\n\nexports.assign    = Object.assign || require('object.assign');\nexports.passError = passError;\nexports.passValue = passValue;\n\n// -----------------------------------------------------------------------------\n\nfunction passError(callback) {\n    return function (reason) {\n        setImmediate(function () {\n            callback(reason);\n        });\n    };\n}\n\nfunction passValue(callback) {\n    return function (value) {\n        setImmediate(function () {\n            callback(null, value);\n        });\n    };\n}\n"}